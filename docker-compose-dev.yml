name: scrum-project-manager-backend
version: "3.8"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    volumes:
      - ./environment/data/mysql:/var/lib/mysql
      - ./environment/mysql/init:/docker-entrypoint-initdb.d/
    command:
      [
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci",
        "--skip-character-set-client-handshake",
      ]
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - scrum-project-manager-backend-network

  redis-master:
    image: redis:7.2.4
    container_name: redis-master
    volumes:
      - ./environment/data/redis/master:/data
    environment:
      REDIS_PASSWORD: dev
    command:
      [
        "sh",
        "-c",
        "redis-server --appendonly yes  --requirepass $$REDIS_PASSWORD",
      ]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scrum-project-manager-backend-network

  redis-slave-1:
    image: redis:7.2.4
    container_name: redis-slave-1
    volumes:
      - ./environment/data/redis/slave-1:/data
    environment:
      REDIS_PASSWORD: dev
      REDIS_MASTER_PASSWORD: dev
    command:
      [
        "sh",
        "-c",
        "redis-server --appendonly yes --slaveof redis-master 6379 --masterauth $$REDIS_MASTER_PASSWORD --requirepass $$REDIS_PASSWORD",
      ]
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      redis-master:
        condition: service_healthy

  redis-slave-2:
    image: redis:7.2.4
    container_name: redis-slave-2
    volumes:
      - ./environment/data/redis/slave-2:/data
    environment:
      REDIS_PASSWORD: dev
      REDIS_MASTER_PASSWORD: dev
    command:
      [
        "sh",
        "-c",
        "redis-server --appendonly yes --slaveof redis-master 6379 --masterauth $$REDIS_MASTER_PASSWORD --requirepass $$REDIS_PASSWORD",
      ]
    ports:
      - "6381:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      redis-master:
        condition: service_healthy

  redis-sentinel-1:
    image: redis:7.2.4
    container_name: redis-sentinel-1
    volumes:
      - ./environment/redis/sentinel.conf/:/data/sentinel.conf:ro
      - ./environment/data/redis/sentinel-1:/etc/redis
    command:
      [
        "sh",
        "-c",
        "cp /data/sentinel.conf /etc/redis/sentinel.conf && redis-sentinel /etc/redis/sentinel.conf",
      ]
    ports:
      - "26379:26379"
    healthcheck:
      test:
        ["CMD-SHELL", "redis-cli -p 26379 info | grep -q 'sentinel_masters'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      redis-master:
        condition: service_healthy
      redis-slave-1:
        condition: service_healthy
      redis-slave-2:
        condition: service_healthy

  redis-sentinel-2:
    image: redis:7.2.4
    container_name: redis-sentinel-2
    volumes:
      - ./environment/redis/sentinel.conf/:/data/sentinel.conf:ro
      - ./environment/data/redis/sentinel-2:/etc/redis
    command:
      [
        "sh",
        "-c",
        "cp /data/sentinel.conf /etc/redis/sentinel.conf && redis-sentinel /etc/redis/sentinel.conf",
      ]
    ports:
      - "26380:26379"
    healthcheck:
      test:
        ["CMD-SHELL", "redis-cli -p 26379 info | grep -q 'sentinel_masters'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      redis-master:
        condition: service_healthy
      redis-slave-1:
        condition: service_healthy
      redis-slave-2:
        condition: service_healthy

  redis-sentinel-3:
    image: redis:7.2.4
    container_name: redis-sentinel-3
    volumes:
      - ./environment/redis/sentinel.conf/:/data/sentinel.conf:ro
      - ./environment/data/redis/sentinel-3:/etc/redis
    command:
      [
        "sh",
        "-c",
        "cp /data/sentinel.conf /etc/redis/sentinel.conf && redis-sentinel /etc/redis/sentinel.conf",
      ]
    ports:
      - "26381:26379"
    healthcheck:
      test:
        ["CMD-SHELL", "redis-cli -p 26379 info | grep -q 'sentinel_masters'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      redis-master:
        condition: service_healthy
      redis-slave-1:
        condition: service_healthy
      redis-slave-2:
        condition: service_healthy

  discovery-service:
    container_name: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile.dev
    ports:
      - "8761:8761"
    volumes:
      - ./discovery-service/src:/home/devuser/app/src
      - ./discovery-service/target:/home/devuser/app/target
      - ./discovery-service/pom.xml:/home/devuser/app/pom.xml
      - ./environment/.m2:/home/devuser/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      EUREKA_USERNAME: dev
      EUREKA_PASSWORD: dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -u $$EUREKA_USERNAME:$$EUREKA_PASSWORD http://localhost:8761/actuator/health | jq -r .status | grep -q UP",
        ]
      interval: 30s
      timeout: 300s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      mysql:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-slave-1:
        condition: service_healthy
      redis-slave-2:
        condition: service_healthy
  
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway/src:/home/devuser/app/src
      - ./api-gateway/target:/home/devuser/app/target
      - ./api-gateway/pom.xml:/home/devuser/app/pom.xml
      - ./environment/.m2:/home/devuser/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:8080/actuator/health | jq -r .status | grep -q UP",
        ]
      interval: 30s
      timeout: 120s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      mysql:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-slave-1:
        condition: service_healthy
      redis-slave-2:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
  
  identity-service:
    container_name: identity-service
    build:
      context: ./identity-service
      dockerfile: Dockerfile.dev
    ports:
      - "8081:8081"
    volumes:
      - ./identity-service/src:/home/devuser/app/src
      - ./identity-service/target:/home/devuser/app/target
      - ./identity-service/pom.xml:/home/devuser/app/pom.xml
      - ./environment/.m2:/home/devuser/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:8081/actuator/health | jq -r .status | grep -q UP",
        ]
      interval: 30s
      timeout: 120s
      retries: 3
    networks:
      - scrum-project-manager-backend-network
    depends_on:
      mysql:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-slave-1:
        condition: service_healthy
      redis-slave-2:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      api-gateway:
        condition: service_healthy

networks:
  scrum-project-manager-backend-network:
    name: scrum-project-manager-backend-network
    driver: bridge
